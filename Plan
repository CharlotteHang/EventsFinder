add admin to inactivate some user accounts??

java.sql.SQLSyntaxErrorException: Unknown column 'image_url' in 'field list' : Hibernate is assuming that the entity field returnPolicy corresponds to the table column return_policy. But actually, the column name is returnPolicy

duplicate primary keys: change session.save to session.saveOrUpdate

After filterChain.doFilter is called it's too late to do anything with the response. At this point, the entire response was already sent to the client.
put responseWrapper.addHeader("Access-Control-Allow-Origin", "http://localhost:3000"); before     filterChain.doFilter(requestWrapper, responseWrapper);

Unexpected end of JSON input!,Resolved [org.springframework.http.converter.HttpMessageNotWritableException: Could not write JSON: Infinite recursion (StackOverflowError);
nested exception is com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError)
(through reference chain: com.eventsRecommendation.eventsdemo.entity.Item["categories"]->java.util.HashSet[0]->com.eventsRecommendation.eventsdemo.entity.Category["item"]->com.eventsRecommendation.eventsdemo.entity.Item["categories"]->java.util.HashSet[0]->com.eventsRecommendation.eventsdemo.entity.Category["item"]->com.eventsRecommendation.eventsdemo.entity.Item["categories"]

param of email does not exist: FE pass the param as body, but BE get them from @RequestParam
change RequestParam to RequestBody and create the LoginRequestPresentation

logged in successfully(check the session in database) but checkloggedIn return false
because: isTimeout is  true but it should be false sth wrong with the time??

cannot add favourite: ?? finally find that the cookie is not in the request : ( is your request sent over HTTPS? Your cookie has the secure flag set, so it won't transmit over an unsecured channel)
Because: You cannot use dependency injection from a filter out of the box. Although you are using GenericFilterBean your Servlet Filter is not managed by spring. As noted by the javadocs
This generic filter base class has no dependency on the Spring org.springframework.context.ApplicationContext concept. Filters usually don't load their own context but rather access service beans from the Spring root application context, accessible via the filter's ServletContext (see org.springframework.web.context.support.WebApplicationContextUtils).
A filter is instantiated by the servlet container so @Autowired is useless.
】web应用启动的顺序是：listener->filter->servlet

likeItem: did not save in the joint table "history" (!!!!!!debug with printing the sql to console, check stackoverlow)
Because: you should definitely redesign your relations.
Without even getting into the problems with your current save scenario, with bidirectional @ManyToMany + CascadeType.ALL, you're destined to get even more troubles.
For example, deleting one bus will due to cascade, delete all its drivers, which due to cascade again, will delete all its buses.
You'll basically end up deleting much more than you probably want. Also, check the SQL generated by these mappings, you'll most likely notice that its far from ideal.